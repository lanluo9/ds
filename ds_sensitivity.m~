% sensitivity plot for single cell
% later will import ds cell id list to achieve sequential plotting for
% every single ds cell

%% changeable dataset_num & ds_now
clear
clc

dataset_num = '00'; % dim flashes stimulus to test absolute sensitivity
prefix_now = '/Volumes/dusom_fieldlab';
% prefix_now = '/Volumes/All_Staff/';

datapath = append(prefix_now, '/lab/Experiments/Array/Analysis/2019-11-21-0/data0', dataset_num, '/data0', dataset_num);
% datapath = '/Volumes/???/lab/Experiments/Array/Analysis/2019-11-21-0/data002/data002';

%% load data
datarun = load_data(datapath);
datarun = load_neurons(datarun);
datarun = load_params(datarun);
datarun = load_ei(datarun, 'all', 'array_type', 519);
% datarun.names.stimulus_path = append(prefix_now, '/lab/Experiments/Array/Analysis/2019-11-21-0/stimuli/s', dataset_num, '.txt');
% datarun.names.stimulus_path = '/Volumes/All_Staff/lab/Experiments/Array/Analysis/2019-11-21-0/stimuli/s02.txt';

%% process triggers and extract some stim params
% trigger_set = round(datarun.triggers);
% trig_inds = find(mod(trigger_set, 10) == 0);
% user_defined_trigs = datarun.triggers(trig_inds);
% datarun = load_stim(datarun, 'user_defined_trigger_set', trig_inds);
% num_stim = length(datarun.stimulus.combinations);
% grat_dirs = datarun.stimulus.params.DIRECTION;
% grat_TPs = datarun.stimulus.params.TEMPORAL_PERIOD;
% stim_dur = 8;
% num_reps = datarun.stimulus.repetitions;
% num_rgcs = length(datarun.cell_ids);

% verify datarun.spikes
% histogram(datarun.spikes{1,1}, 40)

%% scaffold: single section of darkness. cell id = 469, index = 21
gaps = round(diff(datarun.triggers));
switch_flag = gaps ~= 2 & gaps ~= 4;
switch_duration = [round(datarun.triggers(1)) - 300; gaps(switch_flag)];

tmp_triggers = datarun.triggers(switch_flag);
switch_index = [];
for i = 1 : length(tmp_triggers)
    switch_index = [switch_index, find(datarun.triggers == tmp_triggers(i))];
end
section_end = [300; datarun.triggers(switch_index); datarun.duration];
section_start = [0; datarun.triggers(1); datarun.triggers(switch_index + 1)];
sections = [section_start, section_end, (section_end - section_start)];
sections = [sections(1:12,:); [sections(12,2), sections(13,1), (sections(13,1)-sections(12,2))]; sections(13:end,:)];

ndf = [99; 5;4;5; 4;4;4;4;4; 3;4;3;99; 3;2;2;99];
flash_config = [0; 2.4;2.4;2.8; 2.2;2.4;2.2;2.8;2.4; 2.2;2.8;2.4;0; 2.8;4.2;4.8;0];
nflash = [0; sections(2:12,3)./2; 0; sections(14,3)./2; sections(2:12,3)./4];
sections = [sections, ndf, flash_config];

%%
tolerance = 0.01;
cell_index = 35; % slave index! find by datarun.cell_ids. match master id to slave id to slave index
spike_time = datarun.spikes{cell_index, 1};

% section_now = [0, 300];
% section_now = [(0 - tolerance), (300 + tolerance)]; % for first section of 300s dark
section_id = 8; 
section_now = [sections(section_id, 2), sections((section_id+1), 1)];

section_flag = spike_time >= section_now(1) & spike_time <= section_now(2);
spike_time_section = spike_time(section_flag);
spike_time_section = spike_time_section - section_now(1);

%%
rep_max = round(section_now(2) - section_now(1)) / 2;
for rep = 1 : rep_max
    rep_flag = spike_time_section >= (rep-1)*2 & spike_time_section <= rep*2;
    spike_time_rep = spike_time_section(rep_flag);
    spike_time_rep = spike_time_rep - (rep-1)*2;

    rep_mark = rep * ones(length(spike_time_rep),1);
    scatter(spike_time_rep, rep_mark, 50, 'filled')
    hold on
    axis([-0.05 2.05 0 (rep_max + 1)])
end

%% scaffold: sanity check
% ntrig_flash = 60;
% nflash = [60];
% gap_seq = [300];
% for i = 2 : length(switch_index)
%     ntrig_flash = ntrig_flash + switch_index(i) - switch_index(i-1) -1;
%     nflash = [nflash, (switch_index(i) - switch_index(i-1) - 1)];
%     gap_seq = [gap_seq, (datarun.triggers(switch_index(i)) - datarun.triggers(switch_index(i-1)))];
% end
% % ntrig_flash + length(switch_index) + 1 == length(datarun.triggers)
% gap_seq = [gap_seq, (datarun.triggers(end) - gap_seq(end))];
% section_seq = transpose(gap_seq) - switch_duration;

